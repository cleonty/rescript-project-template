// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_HashMapInt = require("rescript/lib/js/belt_HashMapInt.js");

function fib(n) {
  if (n < 2) {
    return 1;
  } else {
    return fib(n - 1 | 0) + fib(n - 2 | 0) | 0;
  }
}

function fibm(n) {
  var memo = Belt_Array.make(n + 1 | 0, undefined);
  var f_mem = function (n) {
    var result = Caml_array.get(memo, n);
    if (result !== undefined) {
      return result;
    }
    var result$1 = n < 2 ? 1 : f_mem(n - 1 | 0) + f_mem(n - 2 | 0) | 0;
    Caml_array.set(memo, n, result$1);
    return result$1;
  };
  return f_mem(n);
}

function memo_rec(f) {
  var h = Belt_HashMapInt.make(16);
  var g = function (x) {
    var y = Belt_HashMapInt.get(h, x);
    if (y !== undefined) {
      return Caml_option.valFromOption(y);
    }
    var y$1 = Curry._1(f, g(x));
    Belt_HashMapInt.set(h, x, y$1);
    return y$1;
  };
  return g;
}

function fib_memo(n) {
  var fib = function (self, n) {
    if (n < 2) {
      return 1;
    } else {
      return Curry._1(self, n - 1 | 0) + Curry._1(self, n - 2 | 0) | 0;
    }
  };
  return memo_rec(fib)(n);
}

exports.fib = fib;
exports.fibm = fibm;
exports.memo_rec = memo_rec;
exports.fib_memo = fib_memo;
/* No side effect */
