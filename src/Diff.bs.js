// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function simplify_plus(a, b) {
  if (a.TAG === /* Const */0 && a._0 === 0) {
    return b;
  }
  if (b.TAG === /* Const */0) {
    if (b._0 !== 0) {
      if (a.TAG === /* Const */0) {
        return {
                TAG: /* Const */0,
                _0: a._0 + b._0 | 0
              };
      } else {
        return {
                TAG: /* Plus */2,
                _0: a,
                _1: b
              };
      }
    } else {
      return a;
    }
  } else {
    return {
            TAG: /* Plus */2,
            _0: a,
            _1: b
          };
  }
}

function simplify_mul(a, b) {
  var exit = 0;
  var exit$1 = 0;
  switch (a.TAG | 0) {
    case /* Const */0 :
        if (a._0 === 0) {
          return {
                  TAG: /* Const */0,
                  _0: 0
                };
        }
        exit$1 = 3;
        break;
    case /* Var */1 :
        var x = a._0;
        switch (b.TAG | 0) {
          case /* Const */0 :
              exit$1 = 3;
              break;
          case /* Mul */3 :
              var c = b._0;
              if (c.TAG !== /* Const */0) {
                return {
                        TAG: /* Mul */3,
                        _0: a,
                        _1: b
                      };
              }
              var y = b._1;
              if (y.TAG === /* Var */1 && x === y._0) {
                return {
                        TAG: /* Mul */3,
                        _0: {
                          TAG: /* Const */0,
                          _0: c._0
                        },
                        _1: {
                          TAG: /* Pow */4,
                          _0: {
                            TAG: /* Var */1,
                            _0: x
                          },
                          _1: 2
                        }
                      };
              } else {
                return {
                        TAG: /* Mul */3,
                        _0: a,
                        _1: b
                      };
              }
          default:
            return {
                    TAG: /* Mul */3,
                    _0: a,
                    _1: b
                  };
        }
        break;
    default:
      exit$1 = 3;
  }
  if (exit$1 === 3) {
    if (b.TAG === /* Const */0) {
      if (b._0 === 0) {
        return {
                TAG: /* Const */0,
                _0: 0
              };
      }
      exit = 2;
    } else {
      exit = 2;
    }
  }
  if (exit === 2 && a.TAG === /* Const */0 && a._0 === 1) {
    return b;
  }
  if (b.TAG === /* Const */0) {
    if (b._0 !== 1) {
      if (a.TAG === /* Const */0) {
        return {
                TAG: /* Const */0,
                _0: Math.imul(a._0, b._0)
              };
      } else {
        return {
                TAG: /* Mul */3,
                _0: a,
                _1: b
              };
      }
    } else {
      return a;
    }
  } else {
    return {
            TAG: /* Mul */3,
            _0: a,
            _1: b
          };
  }
}

function simplify_pow(e, n) {
  if (n !== 0) {
    if (n !== 1) {
      return {
              TAG: /* Pow */4,
              _0: e,
              _1: n
            };
    } else {
      return e;
    }
  } else {
    return {
            TAG: /* Const */0,
            _0: 1
          };
  }
}

function simplify_diff(e, x) {
  switch (e.TAG | 0) {
    case /* Const */0 :
        return {
                TAG: /* Const */0,
                _0: 0
              };
    case /* Var */1 :
        if (e._0 === x) {
          return {
                  TAG: /* Const */0,
                  _0: 1
                };
        } else {
          return {
                  TAG: /* Const */0,
                  _0: 0
                };
        }
    case /* Plus */2 :
        return simplify({
                    TAG: /* Plus */2,
                    _0: {
                      TAG: /* Diff */5,
                      _0: e._0,
                      _1: x
                    },
                    _1: {
                      TAG: /* Diff */5,
                      _0: e._1,
                      _1: x
                    }
                  });
    case /* Mul */3 :
        var e2 = e._1;
        var e1 = e._0;
        return simplify({
                    TAG: /* Plus */2,
                    _0: {
                      TAG: /* Mul */3,
                      _0: e1,
                      _1: {
                        TAG: /* Diff */5,
                        _0: e2,
                        _1: x
                      }
                    },
                    _1: {
                      TAG: /* Mul */3,
                      _0: {
                        TAG: /* Diff */5,
                        _0: e1,
                        _1: x
                      },
                      _1: e2
                    }
                  });
    case /* Pow */4 :
        var n = e._1;
        var e$1 = e._0;
        return simplify({
                    TAG: /* Mul */3,
                    _0: {
                      TAG: /* Mul */3,
                      _0: {
                        TAG: /* Const */0,
                        _0: n
                      },
                      _1: {
                        TAG: /* Pow */4,
                        _0: e$1,
                        _1: n - 1 | 0
                      }
                    },
                    _1: {
                      TAG: /* Diff */5,
                      _0: e$1,
                      _1: x
                    }
                  });
    case /* Diff */5 :
        return {
                TAG: /* Diff */5,
                _0: e,
                _1: x
              };
    
  }
}

function simplify(e) {
  switch (e.TAG | 0) {
    case /* Const */0 :
    case /* Var */1 :
        return e;
    case /* Plus */2 :
        return simplify_plus(collect(e._0), collect(e._1));
    case /* Mul */3 :
        return simplify_mul(collect(e._0), collect(e._1));
    case /* Pow */4 :
        return simplify_pow(collect(e._0), e._1);
    case /* Diff */5 :
        return simplify_diff(collect(e._0), e._1);
    
  }
}

function collect(e) {
  var s = simplify(e);
  if (s.TAG !== /* Mul */3) {
    return s;
  }
  var a = s._0;
  var match = s._1;
  if (match.TAG === /* Plus */2) {
    return simplify_plus(simplify_mul(collect(a), collect(match._0)), simplify_mul(collect(a), collect(match._1)));
  }
  switch (a.TAG | 0) {
    case /* Const */0 :
        var match$1 = s._1;
        if (match$1.TAG !== /* Mul */3) {
          return s;
        }
        var b = match$1._0;
        var a$1 = a._0;
        var c = match$1._1;
        if (c.TAG === /* Const */0) {
          return simplify_mul({
                      TAG: /* Const */0,
                      _0: Math.imul(a$1, c._0)
                    }, b);
        } else if (b.TAG === /* Const */0) {
          return simplify_mul({
                      TAG: /* Const */0,
                      _0: Math.imul(a$1, b._0)
                    }, match$1._1);
        } else {
          return s;
        }
    case /* Plus */2 :
        var c$1 = s._1;
        return simplify_plus(simplify_mul(collect(a._0), collect(c$1)), simplify_mul(collect(a._1), collect(c$1)));
    case /* Mul */3 :
        var a$2 = a._0;
        if (a$2.TAG === /* Const */0) {
          var c$2 = s._1;
          if (c$2.TAG === /* Const */0) {
            return simplify_mul({
                        TAG: /* Const */0,
                        _0: Math.imul(a$2._0, c$2._0)
                      }, a._1);
          } else {
            return s;
          }
        }
        var b$1 = a._1;
        if (b$1.TAG !== /* Const */0) {
          return s;
        }
        var c$3 = s._1;
        if (c$3.TAG === /* Const */0) {
          return simplify_mul({
                      TAG: /* Const */0,
                      _0: Math.imul(b$1._0, c$3._0)
                    }, a$2);
        } else {
          return s;
        }
    default:
      return s;
  }
}

function string_of_expr(e) {
  switch (e.TAG | 0) {
    case /* Const */0 :
        return String(e._0);
    case /* Var */1 :
        return e._0;
    case /* Plus */2 :
        return "(" + string_of_expr(e._0) + "+" + string_of_expr(e._1) + ")";
    case /* Mul */3 :
        return string_of_expr(e._0) + "*" + string_of_expr(e._1);
    case /* Pow */4 :
        return string_of_expr(e._0) + "^" + String(e._1);
    case /* Diff */5 :
        return "d(" + string_of_expr(e._0) + ")/d" + e._1;
    
  }
}

var x = {
  TAG: /* Var */1,
  _0: "x"
};

var f_0 = {
  TAG: /* Mul */3,
  _0: {
    TAG: /* Mul */3,
    _0: {
      TAG: /* Plus */2,
      _0: {
        TAG: /* Plus */2,
        _0: {
          TAG: /* Pow */4,
          _0: x,
          _1: 3
        },
        _1: {
          TAG: /* Mul */3,
          _0: x,
          _1: {
            TAG: /* Const */0,
            _0: 3
          }
        }
      },
      _1: {
        TAG: /* Const */0,
        _0: 5
      }
    },
    _1: {
      TAG: /* Const */0,
      _0: 4
    }
  },
  _1: {
    TAG: /* Const */0,
    _0: 3
  }
};

var f_1 = {
  TAG: /* Const */0,
  _0: 3
};

var f = {
  TAG: /* Mul */3,
  _0: f_0,
  _1: f_1
};

var d = {
  TAG: /* Diff */5,
  _0: f,
  _1: "x"
};

console.log(string_of_expr(d), "=", string_of_expr(collect(d)));

exports.simplify_plus = simplify_plus;
exports.simplify_mul = simplify_mul;
exports.simplify_pow = simplify_pow;
exports.simplify_diff = simplify_diff;
exports.simplify = simplify;
exports.collect = collect;
exports.string_of_expr = string_of_expr;
exports.x = x;
exports.f = f;
exports.d = d;
/*  Not a pure module */
