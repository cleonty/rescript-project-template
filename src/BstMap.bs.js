// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Pervasives = require("rescript/lib/js/pervasives.js");

function insert(t, k, v) {
  if (!t) {
    return /* Node */{
            key: k,
            value: v,
            left: /* Leaf */0,
            right: /* Leaf */0
          };
  }
  var right = t.right;
  var left = t.left;
  var value = t.value;
  var key = t.key;
  if (Caml_obj.caml_compare(k, key) < 0) {
    return /* Node */{
            key: key,
            value: value,
            left: insert(left, k, v),
            right: right
          };
  } else {
    return /* Node */{
            key: key,
            value: value,
            left: left,
            right: insert(right, k, v)
          };
  }
}

function lookup(_t, k) {
  while(true) {
    var t = _t;
    if (!t) {
      return Pervasives.failwith("not found");
    }
    var cmpRes = Caml_obj.caml_compare(k, t.key);
    if (cmpRes === 0) {
      return t.value;
    }
    if (cmpRes < 0) {
      _t = t.left;
      continue ;
    }
    _t = t.right;
    continue ;
  };
}

function bindings(t) {
  if (t) {
    return [[
                  t.key,
                  t.value
                ]].concat(bindings(t.left)).concat(bindings(t.right));
  } else {
    return [];
  }
}

var BstMap = {
  empty: /* Leaf */0,
  insert: insert,
  lookup: lookup,
  bindings: bindings
};

var m = insert(insert(/* Leaf */0, "hello", "world"), "a", "b");

console.log(bindings(m));

exports.BstMap = BstMap;
exports.m = m;
/* m Not a pure module */
