// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var one = /* Succ */{
  _0: /* Zero */0
};

var two = /* Succ */{
  _0: one
};

var three = /* Succ */{
  _0: two
};

var four = /* Succ */{
  _0: three
};

function iszero(m) {
  if (m) {
    return false;
  } else {
    return true;
  }
}

var Pred_Zero = /* @__PURE__ */Caml_exceptions.create("NatNumbers.Pred_Zero");

function pred(n) {
  if (n) {
    return n._0;
  }
  throw {
        RE_EXN_ID: Pred_Zero,
        Error: new Error()
      };
}

function add(_n1, _n2) {
  while(true) {
    var n2 = _n2;
    var n1 = _n1;
    if (!n1) {
      return n2;
    }
    _n2 = /* Succ */{
      _0: n2
    };
    _n1 = n1._0;
    continue ;
  };
}

function int_of_nat(n) {
  if (n) {
    return 1 + int_of_nat(n._0) | 0;
  } else {
    return 0;
  }
}

var Nat_Of_Int_Negative = /* @__PURE__ */Caml_exceptions.create("NatNumbers.Nat_Of_Int_Negative");

function nat_of_int(n) {
  if (n === 0) {
    return /* Zero */0;
  }
  if (n > 0) {
    return /* Succ */{
            _0: nat_of_int(n - 1 | 0)
          };
  }
  throw {
        RE_EXN_ID: Nat_Of_Int_Negative,
        Error: new Error()
      };
}

function even(n) {
  if (n) {
    return odd(n._0);
  } else {
    return true;
  }
}

function odd(n) {
  if (n) {
    return even(n._0);
  } else {
    return false;
  }
}

var zero = /* Zero */0;

exports.zero = zero;
exports.one = one;
exports.two = two;
exports.three = three;
exports.four = four;
exports.iszero = iszero;
exports.Pred_Zero = Pred_Zero;
exports.pred = pred;
exports.add = add;
exports.int_of_nat = int_of_nat;
exports.Nat_Of_Int_Negative = Nat_Of_Int_Negative;
exports.nat_of_int = nat_of_int;
exports.even = even;
exports.odd = odd;
/* No side effect */
