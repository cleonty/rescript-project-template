// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");

function simplify(e) {
  if (e.TAG !== /* Plus */2) {
    return e;
  }
  var match = e._1;
  if (match.TAG !== /* Plus */2) {
    return e;
  }
  var a = e._0;
  if (Caml_obj.caml_equal(a, match._0)) {
    return {
            TAG: /* Plus */2,
            _0: {
              TAG: /* Mul */3,
              _0: {
                TAG: /* Const */0,
                _0: 2
              },
              _1: a
            },
            _1: match._1
          };
  } else {
    return e;
  }
}

function string_of_expr(e) {
  switch (e.TAG | 0) {
    case /* Const */0 :
        return String(e._0);
    case /* Var */1 :
        return e._0;
    case /* Plus */2 :
        return "(" + string_of_expr(e._0) + " + " + string_of_expr(e._1) + ")";
    case /* Mul */3 :
        return string_of_expr(e._0) + " * " + string_of_expr(e._1);
    
  }
}

var a = {
  TAG: /* Plus */2,
  _0: {
    TAG: /* Const */0,
    _0: 1
  },
  _1: {
    TAG: /* Const */0,
    _0: 2
  }
};

var b = {
  TAG: /* Plus */2,
  _0: {
    TAG: /* Const */0,
    _0: 1
  },
  _1: {
    TAG: /* Const */0,
    _0: 2
  }
};

var c = {
  TAG: /* Const */0,
  _0: 123
};

var e_1 = {
  TAG: /* Plus */2,
  _0: b,
  _1: c
};

var e = {
  TAG: /* Plus */2,
  _0: a,
  _1: e_1
};

var f = simplify(e);

console.log(string_of_expr(f));

exports.simplify = simplify;
exports.string_of_expr = string_of_expr;
exports.a = a;
exports.b = b;
exports.c = c;
exports.e = e;
exports.f = f;
/* f Not a pure module */
