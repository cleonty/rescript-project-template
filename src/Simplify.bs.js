// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function simplify(e) {
  switch (e.TAG | 0) {
    case /* Const */0 :
    case /* Var */1 :
        return e;
    case /* Plus */2 :
        return simplify_plus(e._0, e._1);
    case /* Mul */3 :
        return simplify_mul(e._0, e._1);
    
  }
}

function simplify_plus(a, b) {
  var match = simplify(a);
  var match$1 = simplify(b);
  if (match.TAG === /* Const */0) {
    var a$1 = match._0;
    if (match$1.TAG === /* Const */0) {
      return {
              TAG: /* Const */0,
              _0: a$1 + match$1._0 | 0
            };
    }
    if (a$1 === 0) {
      return simplify(match$1);
    }
    switch (match$1.TAG | 0) {
      case /* Plus */2 :
          var b$1 = match$1._0;
          var c = match$1._1;
          if (c.TAG === /* Const */0) {
            return simplify({
                        TAG: /* Plus */2,
                        _0: {
                          TAG: /* Const */0,
                          _0: a$1 + c._0 | 0
                        },
                        _1: b$1
                      });
          } else if (b$1.TAG === /* Const */0) {
            return simplify({
                        TAG: /* Plus */2,
                        _0: {
                          TAG: /* Const */0,
                          _0: a$1 + b$1._0 | 0
                        },
                        _1: match$1._1
                      });
          } else {
            return {
                    TAG: /* Plus */2,
                    _0: match,
                    _1: match$1
                  };
          }
      case /* Var */1 :
      case /* Mul */3 :
          return {
                  TAG: /* Plus */2,
                  _0: match,
                  _1: match$1
                };
      
    }
  } else {
    if (match$1.TAG !== /* Const */0) {
      return {
              TAG: /* Plus */2,
              _0: match,
              _1: match$1
            };
    }
    if (match$1._0 === 0) {
      return simplify(match);
    }
    switch (match.TAG | 0) {
      case /* Plus */2 :
          var a$2 = match._0;
          if (a$2.TAG === /* Const */0) {
            return simplify({
                        TAG: /* Plus */2,
                        _0: {
                          TAG: /* Const */0,
                          _0: a$2._0 + match$1._0 | 0
                        },
                        _1: match._1
                      });
          }
          var b$2 = match._1;
          if (b$2.TAG === /* Const */0) {
            return simplify({
                        TAG: /* Plus */2,
                        _0: {
                          TAG: /* Const */0,
                          _0: b$2._0 + match$1._0 | 0
                        },
                        _1: a$2
                      });
          } else {
            return {
                    TAG: /* Plus */2,
                    _0: match,
                    _1: match$1
                  };
          }
      case /* Var */1 :
      case /* Mul */3 :
          return {
                  TAG: /* Plus */2,
                  _0: match,
                  _1: match$1
                };
      
    }
  }
}

function simplify_mul(a, b) {
  var match = simplify(a);
  var match$1 = simplify(b);
  var exit = 0;
  var exit$1 = 0;
  if (match$1.TAG === /* Plus */2) {
    return simplify({
                TAG: /* Plus */2,
                _0: {
                  TAG: /* Mul */3,
                  _0: match,
                  _1: match$1._0
                },
                _1: {
                  TAG: /* Mul */3,
                  _0: match,
                  _1: match$1._1
                }
              });
  }
  switch (match.TAG | 0) {
    case /* Const */0 :
        var a$1 = match._0;
        var exit$2 = 0;
        switch (match$1.TAG | 0) {
          case /* Const */0 :
          case /* Var */1 :
              exit$2 = 4;
              break;
          case /* Mul */3 :
              var b$1 = match$1._0;
              var c = match$1._1;
              if (c.TAG === /* Const */0) {
                return simplify({
                            TAG: /* Mul */3,
                            _0: {
                              TAG: /* Const */0,
                              _0: Math.imul(a$1, c._0)
                            },
                            _1: b$1
                          });
              }
              if (b$1.TAG === /* Const */0) {
                return simplify({
                            TAG: /* Mul */3,
                            _0: {
                              TAG: /* Const */0,
                              _0: Math.imul(a$1, b$1._0)
                            },
                            _1: match$1._1
                          });
              }
              exit$2 = 4;
              break;
          
        }
        if (exit$2 === 4) {
          if (a$1 === 0) {
            return {
                    TAG: /* Const */0,
                    _0: 0
                  };
          }
          exit$1 = 3;
        }
        break;
    case /* Var */1 :
        exit$1 = 3;
        break;
    case /* Plus */2 :
        return simplify({
                    TAG: /* Plus */2,
                    _0: {
                      TAG: /* Mul */3,
                      _0: match._0,
                      _1: match$1
                    },
                    _1: {
                      TAG: /* Mul */3,
                      _0: match._1,
                      _1: match$1
                    }
                  });
    case /* Mul */3 :
        var a$2 = match._0;
        if (a$2.TAG === /* Const */0) {
          switch (match$1.TAG | 0) {
            case /* Const */0 :
                return simplify({
                            TAG: /* Mul */3,
                            _0: {
                              TAG: /* Const */0,
                              _0: Math.imul(a$2._0, match$1._0)
                            },
                            _1: match._1
                          });
            case /* Var */1 :
            case /* Mul */3 :
                return {
                        TAG: /* Mul */3,
                        _0: match,
                        _1: match$1
                      };
            
          }
        } else {
          var b$2 = match._1;
          if (b$2.TAG === /* Const */0) {
            switch (match$1.TAG | 0) {
              case /* Const */0 :
                  return simplify({
                              TAG: /* Mul */3,
                              _0: {
                                TAG: /* Const */0,
                                _0: Math.imul(b$2._0, match$1._0)
                              },
                              _1: a$2
                            });
              case /* Var */1 :
              case /* Mul */3 :
                  return {
                          TAG: /* Mul */3,
                          _0: match,
                          _1: match$1
                        };
              
            }
          } else {
            exit$1 = 3;
          }
        }
        break;
    
  }
  if (exit$1 === 3) {
    switch (match$1.TAG | 0) {
      case /* Const */0 :
          if (match$1._0 === 0) {
            return {
                    TAG: /* Const */0,
                    _0: 0
                  };
          }
          exit = 2;
          break;
      case /* Var */1 :
      case /* Mul */3 :
          exit = 2;
          break;
      
    }
  }
  if (exit === 2) {
    switch (match.TAG | 0) {
      case /* Const */0 :
          var a$3 = match._0;
          var exit$3 = 0;
          switch (match$1.TAG | 0) {
            case /* Const */0 :
                return {
                        TAG: /* Const */0,
                        _0: Math.imul(a$3, match$1._0)
                      };
            case /* Var */1 :
            case /* Mul */3 :
                exit$3 = 3;
                break;
            
          }
          if (exit$3 === 3 && a$3 === 1) {
            return simplify(match$1);
          }
          break;
      case /* Var */1 :
      case /* Mul */3 :
          break;
      
    }
  }
  switch (match$1.TAG | 0) {
    case /* Const */0 :
        if (match$1._0 !== 1) {
          return {
                  TAG: /* Mul */3,
                  _0: match,
                  _1: match$1
                };
        } else {
          return simplify(match);
        }
    case /* Var */1 :
    case /* Mul */3 :
        return {
                TAG: /* Mul */3,
                _0: match,
                _1: match$1
              };
    
  }
}

function string_of_expr(e) {
  switch (e.TAG | 0) {
    case /* Const */0 :
        return String(e._0);
    case /* Var */1 :
        return e._0;
    case /* Plus */2 :
        return "(" + string_of_expr(e._0) + " + " + string_of_expr(e._1) + ")";
    case /* Mul */3 :
        return string_of_expr(e._0) + " * " + string_of_expr(e._1);
    
  }
}

var x = {
  TAG: /* Mul */3,
  _0: {
    TAG: /* Mul */3,
    _0: {
      TAG: /* Plus */2,
      _0: {
        TAG: /* Const */0,
        _0: 2
      },
      _1: {
        TAG: /* Var */1,
        _0: "x"
      }
    },
    _1: {
      TAG: /* Const */0,
      _0: 3
    }
  },
  _1: {
    TAG: /* Const */0,
    _0: 5
  }
};

var y = simplify(x);

console.log(string_of_expr(x), "=", string_of_expr(y));

exports.simplify = simplify;
exports.simplify_plus = simplify_plus;
exports.simplify_mul = simplify_mul;
exports.string_of_expr = string_of_expr;
exports.x = x;
exports.y = y;
/* y Not a pure module */
